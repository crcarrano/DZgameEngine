/**************************************************************************
 *   Copyright (C) 2015 by Carlo Carrano                                  *
 *   crc@dazzlingsolutions.com                                            *
 *                                                                        *
 *   This program is free software; you can redistribute it and/or modify *
 *   it under the terms of the GNU General Public License as published by *
 *   the Free Software Foundation; version 2 of the License.              *
 *   This program is distributed in the hope that it will be useful, but  *
 *   WITHOUT ANY WARRANTY; without even the implied warranty of           *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU     *
 *   General Public License for more details.                             *
 *   You should have received a copy of the GNU General Public License    *
 *   along with this program; if not, write to the Free Software          *
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  *
 *   USA.  																  *
 **************************************************************************/

/**************************************************************************
 * Change Log                                                             *
 *------------------------------------------------------------------------*
 * 03-17-2015	file created                                              *
 **************************************************************************/

#ifndef _DZSOUND_SYSTEM_
#define _DZSOUND_SYSTEM_

#include "SDL.h"
#include "SDL_mixer.h"
#include "DZarray.h"
#include <string>

using namespace std;


/*****************************************************************
 *
 * Class:		DZsoundSystem
 *
 * Description:	Handles sounds and special effects from audio 
 * 				files of several formats (.wav, .aiff, .voc, .mod,
 * 				.mid, .ogg, .mp3, .flac
 *
 * Interface:		
 *
 ****************************************************************/

// use this definition for an infine number of loops when playing
// music or a sound effect
#define DZ_LOOP_FOREVER (-1)

// use this definition to address all sound effect IDs at the same time
#define DZ_ALL_SOUND_EFFECTS (-1)

// other useful definitions
#define DZ_MAX_VOLUME	(128)
#define DZ_SILENCE		(0)


typedef struct soundEffect
{
	int			volume;			// loaded from XML config file
	Mix_Chunk*	effect;			// generated by SDL_mixer lib
	string		filename;		// loaded from XML config file
} SOUND_EFFECT;

typedef struct musicPiece
{
	int			volume;			// loaded from XML config file
	Mix_Music*	music;			// generated by SDL_mixer lib
	string		filename;		// loaded from XML config file
} MUSIC_PIECE;



class DZsoundSystem
{
	public:
		DZsoundSystem();
		~DZsoundSystem();

		void	changeMusicVolume(int volume);
		void	playMusic(unsigned int id, int number_of_loops, int fade_in_msec);
		void	pauseMusic();
		void	resumeMusic();
		void	stopMusic(int fade_out_msec);
		bool	isMusicPlaying();
		bool	isMusicPaused();

		void	setEffectsMasterVolume(int volume);
		void	playEffect(unsigned int id, int number_of_loops, int fade_in_msec);
		void	pauseEffect(unsigned int id);
		void	resumeEffect(unsigned int id);
		void	stopEffect(unsigned int id, int fade_out_msec);
		bool	isEffectPlaying(unsigned int id);
		bool	isEffectPaused(unsigned int id);

	protected:

	private:
		void init();				// initialize sound system with values taken from the
									// XML configuration file or, if not present, using
									// default values
									
		void loadSoundEffectList();
		void loadMusicList();

		int getEffectChannels();	// get the amount of needed channels to play effects

		int						rate;				// sample rate
		Uint16					format;				// audio format
		int						channels;			// number of stereo channels
		int						chunkSize;			// bytes used per output sample
		DZarray<SOUND_EFFECT>	soundEffectList;	// list of sound effects
		DZarray<MUSIC_PIECE>	musicList;			// list of music pieces
		bool					isOpen;				// whether sound system is operational
};


#endif
